<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactiveUI.Xaml</name>
    </assembly>
    <members>
        <member name="M:ReactiveUI.Xaml.DependencyPropertyMixin.ObservableFromDP``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates an IObservable from an existing dependency property. Note
            that this method is somewhat expensive and should not be called
            frequently.
            </summary>
            <param name="property">An Expression specifying the property to use
            on the DependencyObject (e.g. x => x.SomeProperty)</param>
            <returns>An Observable that fires whenever the DP changes, and never
            completes.</returns>
        </member>
        <member name="T:ReactiveUI.Xaml.IReactiveCommand">
            <summary>
            IReactiveCommand is an Rx-enabled version of ICommand that is also an
            Observable. Its Observable fires once for each invocation of
            ICommand.Execute and its value is the CommandParameter that was
            provided.
            </summary>
        </member>
        <member name="P:ReactiveUI.Xaml.IReactiveCommand.CanExecuteObservable">
            <summary>
            Fires whenever the CanExecute of the ICommand changes. Note that
            this should not fire notifications unless the CanExecute changes
            (i.e. it should not fire 'true', 'true').
            </summary>
        </member>
        <member name="T:ReactiveUI.Xaml.IReactiveAsyncCommand">
            <summary>
            IReactiveAsyncCommand represents commands that run an asynchronous
            operation in the background when invoked.
            </summary>
        </member>
        <member name="P:ReactiveUI.Xaml.IReactiveAsyncCommand.ItemsInflight">
            <summary>
            Fires whenever the number of asynchronous operations in-flight (i.e.
            currently running) changes and provides the new Count.
            </summary>
        </member>
        <member name="P:ReactiveUI.Xaml.IReactiveAsyncCommand.AsyncStartedNotification">
            <summary>
            Should be fired whenever an async operation starts.
            </summary>
        </member>
        <member name="P:ReactiveUI.Xaml.IReactiveAsyncCommand.AsyncCompletedNotification">
            <summary>
            Should be fired whenever an async operation completes.
            </summary>
        </member>
        <member name="T:ReactiveUI.Xaml.ReactiveAsyncCommand">
            <summary>
            ReactiveAsyncCommand represents commands that run an asynchronous
            operation in the background when invoked. The main benefit of this
            command is that it will keep track of in-flight operations and
            disable/enable CanExecute when there are too many of them (i.e. a
            "Search" button shouldn't have many concurrent requests running if the
            user clicks the button many times quickly)
            </summary>
        </member>
        <member name="M:ReactiveUI.Xaml.ReactiveAsyncCommand.#ctor(System.IObservable{System.Boolean},System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Constructs a new ReactiveAsyncCommand.
            </summary>
            <param name="canExecute">An Observable representing when the command
            can execute. If null, the Command can always execute.</param>
            <param name="maximumConcurrent">The maximum number of in-flight
            operations at a time - defaults to one.</param>
            <param name="scheduler">The scheduler to run the asynchronous
            operations on - defaults to the Taskpool scheduler.</param>
        </member>
        <member name="M:ReactiveUI.Xaml.ReactiveAsyncCommand.Create``1(System.Func{System.Object,``0},System.Action{``0},System.Func{System.Object,System.Boolean},System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Create is a helper method to create a basic ReactiveAsyncCommand
            in a non-Rx way, closer to how BackgroundWorker works.
            </summary>
            <param name="calculationFunc">The function that will calculate
            results in the background</param>
            <param name="callbackFunc">The method to be called once the
            calculation function completes. This method is guaranteed to be
            called on the UI thread.</param>
            <param name="maximumConcurrent">The maximum number of in-flight
            operations at a time - defaults to one.</param>
            <param name="scheduler">The scheduler to run the asynchronous
            operations on - defaults to the Taskpool scheduler.</param>
        </member>
        <member name="M:ReactiveUI.Xaml.ReactiveAsyncCommand.RegisterAsyncFunction``1(System.Func{System.Object,``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            RegisterAsyncFunction registers an asynchronous method that returns a result
            to be called whenever the Command's Execute method is called.
            </summary>
            <param name="calculationFunc">The function to be run in the
            background.</param>
            <param name="scheduler"></param>
            <returns>An Observable that will fire on the UI thread once per
            invoecation of Execute, once the async method completes. Subscribe to
            this to retrieve the result of the calculationFunc.</returns>
        </member>
        <member name="M:ReactiveUI.Xaml.ReactiveAsyncCommand.RegisterAsyncAction(System.Action{System.Object},System.Reactive.Concurrency.IScheduler)">
            <summary>
            RegisterAsyncAction registers an asynchronous method that runs
            whenever the Command's Execute method is called and doesn't return a
            result.
            </summary>
            <param name="calculationFunc">The function to be run in the
            background.</param>
        </member>
        <member name="M:ReactiveUI.Xaml.ReactiveAsyncCommand.RegisterAsyncObservable``1(System.Func{System.Object,System.IObservable{``0}})">
            <summary>
            RegisterAsyncObservable registers an Rx-based async method whose
            results will be returned on the UI thread.
            </summary>
            <param name="calculationFunc">A calculation method that returns a
            future result, such as a method returned via
            Observable.FromAsyncPattern.</param>
            <returns>An Observable representing the items returned by the
            calculation result. Note that with this method it is possible with a
            calculationFunc to return multiple items per invocation of Execute.</returns>
        </member>
        <member name="M:ReactiveUI.Xaml.ReactiveAsyncCommand.RegisterMemoizedFunction``1(System.Func{System.Object,``0},System.Int32,System.Action{``0},System.Reactive.Concurrency.IScheduler)">
             <summary>
             RegisterMemoizedFunction is similar to RegisterAsyncFunction, but
             caches its results so that subsequent Execute calls with the same
             CommandParameter will not need to be run in the background.         
             </summary>
             <param name="calculationFunc">The function that performs the
             expensive or asyncronous calculation and returns the result.
            
             Note that this function *must* return an equivalently-same result given a
             specific input - because the function is being memoized, if the
             calculationFunc depends on other varables other than the input
             value, the results will be unpredictable.</param>
             <param name="maxSize">The number of items to cache. When this limit
             is reached, not recently used items will be discarded.</param>
             <param name="onRelease">This optional method is called when an item
             is evicted from the cache - this can be used to clean up / manage an
             on-disk cache; the calculationFunc can download a file and save it
             to a temporary folder, and the onRelease action will delete the
             file.</param>
             <param name="sched">The scheduler to run asynchronous operations on
             - defaults to TaskpoolScheduler</param>
             <returns>An Observable that will fire on the UI thread once per
             invocation of Execute, once the async method completes. Subscribe to
             this to retrieve the result of the calculationFunc.</returns>
        </member>
        <member name="M:ReactiveUI.Xaml.ReactiveAsyncCommand.RegisterMemoizedObservable``1(System.Func{System.Object,System.IObservable{``0}},System.Int32,System.Action{``0},System.Reactive.Concurrency.IScheduler)">
             <summary>
             RegisterMemoizedObservable is similar to RegisterAsyncObservable, but
             caches its results so that subsequent Execute calls with the same
             CommandParameter will not need to be run in the background.         
             </summary>
             <param name="calculationFunc">The function that performs the
             expensive or asyncronous calculation and returns the result.
            
             Note that this function *must* return an equivalently-same result given a
             specific input - because the function is being memoized, if the
             calculationFunc depends on other varables other than the input
             value, the results will be unpredictable. 
             </param>
             <param name="maxSize">The number of items to cache. When this limit
             is reached, not recently used items will be discarded.</param>
             <param name="onRelease">This optional method is called when an item
             is evicted from the cache - this can be used to clean up / manage an
             on-disk cache; the calculationFunc can download a file and save it
             to a temporary folder, and the onRelease action will delete the
             file.</param>
             <param name="sched">The scheduler to run asynchronous operations on
             - defaults to TaskpoolScheduler</param>
             <returns>An Observable representing the items returned by the
             calculation result. Note that with this method it is possible with a
             calculationFunc to return multiple items per invocation of Execute.</returns>
        </member>
        <member name="T:ReactiveUI.Xaml.ReactiveCommand">
            <summary>
            IReactiveCommand is an Rx-enabled version of ICommand that is also an
            Observable. Its Observable fires once for each invocation of
            ICommand.Execute and its value is the CommandParameter that was
            provided.
            </summary>
        </member>
        <member name="M:ReactiveUI.Xaml.ReactiveCommand.#ctor(System.IObservable{System.Boolean},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Creates a new ReactiveCommand object.
            </summary>
            <param name="canExecute">An Observable, often obtained via
            ObservableFromProperty, that defines when the Command can
            execute.</param>
            <param name="scheduler">The scheduler to publish events on - default
            is RxApp.DeferredScheduler.</param>
        </member>
        <member name="M:ReactiveUI.Xaml.ReactiveCommand.Create(System.Func{System.Object,System.Boolean},System.Action{System.Object},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Creates a new ReactiveCommand object in an imperative, non-Rx way,
            similar to RelayCommand.
            </summary>
            <param name="canExecute">A function that determines when the Command
            can execute.</param>
            <param name="executed">A method that will be invoked when the
            Execute method is invoked.</param>
            <param name="scheduler">The scheduler to publish events on - default
            is RxApp.DeferredScheduler.</param>
            <returns>A new ReactiveCommand object.</returns>
        </member>
        <member name="P:ReactiveUI.Xaml.ReactiveCommand.CanExecuteObservable">
            <summary>
            Fires whenever the CanExecute of the ICommand changes. 
            </summary>
        </member>
        <member name="M:ReactiveUI.Xaml.ReactiveCommandMixins.ToCommand(System.IObservable{System.Boolean},System.Reactive.Concurrency.IScheduler)">
            <summary>
            ToCommand is a convenience method for returning a new
            ReactiveCommand based on an existing Observable chain.
            </summary>
            <param name="scheduler">The scheduler to publish events on - default
            is RxApp.DeferredScheduler.</param>
            <returns>A new ReactiveCommand whose CanExecute Observable is the
            current object.</returns>
        </member>
        <member name="M:ReactiveUI.Xaml.ReactiveCommandMixins.InvokeCommand``1(System.IObservable{``0},System.Windows.Input.ICommand)">
            <summary>
            A utility method that will pipe an Observable to an ICommand (i.e.
            it will first call its CanExecute with the provided value, then if
            the command can be executed, Execute() will be called)
            </summary>
            <param name="command">The command to be executed.</param>
            <returns>An object that when disposes, disconnects the Observable
            from the command.</returns>
        </member>
    </members>
</doc>
